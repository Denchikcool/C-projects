#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <cstring>
using namespace std;

const int N = 4000;

struct locality
{
	char name[32];
	char street[18];
	short int house;
	short int flat;
	char date[10];
};

struct tLE
{
	tLE *next;
	locality person;
};

struct Queue
{
	tLE *head;
	tLE *tail;
};

Queue pointers;

void Print(struct locality **data);
void Application();
void HeapSort(struct locality **ind);
void CreatePyramid(struct locality **ind, int L, int R);
int Less(struct locality *X, struct locality *Y);
void BiSearch(struct locality **ind, char *x);
int Check1(char *a, char *x);
int Check2(char *a, char *x);
void completion(Queue *pointers, locality *person);
void print_sorted(Queue *pointers);

int main(){
	int i, j;
	char KEY[3];
    
	FILE *fl = fopen("testBase4.dat", "rb");
	
	
	struct locality *I = (struct locality*)malloc(N * sizeof(struct locality));
	struct locality **ind = (struct locality**)malloc(N * sizeof(struct locality*));
	
	for(j = 0; j < N; j++){
		ind[j] = &I[j];
	}
	
	fread((locality*)I, sizeof(locality), N, fl);

	while(1){
		Application();
		cin >> i;
		switch(i){
			case 1:
				system("cls");
				Print(ind);
				system("pause");
				system("cls");
				break;
			case 2:
				system("cls");
				HeapSort(ind);
				Print(ind);
				system("pause");
				system("cls");
				break;
			case 3:	
				system("cls");	
				cout << "BiSearch" << endl;
				cout << endl << "Key of search: ";
				cin >> KEY;
				BiSearch(ind, KEY);
				system("pause");
				system("cls");
				break;
			case 4:
				cout << "Goodbye!" << endl;
				exit(0);		
			default:
				system("cls");
				cout << "Wrong value. Enter right number!" << endl;
				system("pause");
				system("cls");
				break;	
		}
	}
	
	delete[] I;
	delete[] ind;
	
return 0;}

void Application(){
	cout << "_______________________________________________" << endl;
	cout << "|1 |          To see the 4 data base          |" << endl;
	cout << "|--|------------------------------------------|" << endl;
	cout << "|2 | To sort data base for the name and street|" << endl;
	cout << "|--|------------------------------------------|" << endl;
	cout << "|3 |              Search                      |" << endl;
	cout << "|--|------------------------------------------|" << endl;
	cout << "|4 |               Exit                       |" << endl;
	cout << "-----------------------------------------------" << endl;
}

void Print(struct locality **data){
	
	int count = 0, ans;
	
	for(int i = 0; i < N; i++){
		printf("%d) ", i + 1);
		printf("%32s", data[i]->name);
		printf("%19s", data[i]->street);
		printf("%7d", data[i]->house);
		printf("%7d", data[i]->flat);
		printf("%12s\n", data[i]->date);
		count++;
		if(count == 20){	
			count = 0;	
			cout << "Do you want to see next 20 writings?(1/0)";
			cin >> ans;
			if(ans == 1){
				continue;
			}
			else if(ans == 0){
				break;
			}
			else{
				i = ans - 2;
			}	
		}
	}
}

void CreatePyramid(struct locality **ind, int L, int R){
	int j = 0, i;
	struct locality *a;

	a = ind[L];
	i = L;

	while (1){
		j = 2 * i;
		if (j > R) break;
		if ((j < R) && (Less(ind[j+1], ind[j]) >= 0)) j++;
		if ((Less(a, ind[j]) >= 0)) break;
		ind[i] = ind[j];
		i = j;
	}
	ind[i] = a;	
}

void HeapSort(struct locality **ind){
	int L, R;
	struct locality *temp;
	L = ceil(N / 2);
	while (L >= 0){
		CreatePyramid(ind, L, N - 1);
		L--;
	}
	R = N - 1;
	while (R >= 0){
		temp = ind[0];
		ind[0] = ind[R];
		ind[R] = temp;
		R--;
		CreatePyramid(ind, 0, R);
	}
}

int Less(struct locality *X, struct locality *Y){
	if (strcmp(X->name, Y->name) > 0){return 1;}
	else if (strcmp(X->name, Y->name) < 0) {return -1;}
	else if (strcmp(X->street, Y->street) > 0){return 1;} 
	else if (strcmp(X->street, Y->street) < 0){return -1;} 
	else{return 0;} 
}

void BiSearch(struct locality **ind, char *x){
	int m, L = 0, R = N - 1;
	pointers.tail = (tLE*)&pointers.head;
	
	while (L < R){
		m = (L + R) / 2;
		if (Check1(ind[m]->name, x)) L = m + 1;
		else R = m;
	}
	if (Check2(ind[R]->name, x)){
		for(int i = L; Check2(ind[R]->name, x) == 1;){
			completion(&pointers, ind[i]);
			i++;
			R++;
			if(R + 1 > N) break;
		}	
	}
	else{
		cout << "Key not found!" << endl;
		system("pause");
		system("cls");
	} 
	print_sorted(&pointers);
}

int Check1(char *a, char *x){
	for(int i = 0; i < 3; i++){
		if(a[i] == x[i]){
			continue;
		}
		else if(a[i] > x[i]){
			return 0;
		}
		else{
			return 1;
		}
	}
	return 0;
}

int Check2(char *a, char *x){
	for(int i = 0; i < 3; i++){
		if(a[i] == x[i]){
			continue;
		}
		else if(a[i] != x[i]){
			return 0;
		}
	}
	return 1;
}

void completion(Queue *pointers, locality *person){
	tLE *p;

	p = new tLE;
	p->next = 0;
	p->person = *person;

	pointers->tail->next = p;
	pointers->tail = p;
}

void print_sorted(Queue *pointers){
	tLE *p;
	p = pointers->head;

	while (p != NULL){
		cout << "Name: " << p->person.name << endl;
		cout << "Street: " << p->person.street << endl;
		cout << "House: " << p->person.house << endl;
		cout << "Flat: " << p->person.flat << endl;
		cout << "Date: " << p->person.date << endl;
		cout << "---------------------------------" << endl;
		
		p = p->next;
	}
	cout << endl;
}

_________________________________________________________________________________________________________


#include <iostream>
#include <time.h>
#include <windows.h>
using namespace std;

const int N = 4;

void computer_number(int *A);
char *number_to_string(int *A, char* comp);
char *person_number(char *B);
void congratulations(int *A);


int main() {
	int bulls, cows, i, j, k;
	char comp[N];
	int digits_number[N];
	char person[N];
	char number_1[N], number_2[N];
	
	computer_number(digits_number);
	char *word_1 = number_to_string(digits_number, comp);
	for (i = 0; i < N; i++) {
		number_1[i] = word_1[i];
	}
	cout << endl;

	do{
		cows = bulls = 0;
		char* word_2 = person_number(person);
		for (k = 0; k < N; k++) {
			number_2[k] = word_2[k];
		}
		cout << endl;
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				if (number_1[i] == number_2[j]) {
					if (i == j) {
						bulls++;
					}
					else {
						cows++;
					}
				}		
			}
		}
		cout << endl << "Bulls = " << bulls << endl << "Cows = " << cows << endl;
	}while (bulls != 4);

	congratulations(digits_number);
	
	return 0;
}

void computer_number(int *A) {
	cout << "Loading..." << endl;
m:

	int i = N-1;
	srand(time(0));
	Sleep(1000);

	for (i = 0; i < N; i++) {
		A[i] = rand() % (9 - 0 + 1) + 0;
	}
	

	while (1) {
		if ((A[0] != A[1]) && (A[0] != A[2]) && (A[0] != A[3]) && (A[1] != A[2]) && (A[1] != A[3]) && (A[2] != A[3])) {
			break;
		}
		else {
			goto m;
		}
	}

	cout << endl << "Number has created successfully!" << endl;
}


char* number_to_string(int *A, char* comp) {
	int i;
	static char computer[N];

	for (i = 0; i < N; i++) {
		computer[i] = A[i] + '0';
	}
	cout << endl;
	return computer;
}

char* person_number(char *B) {
	int i, len = 0;
	char num[N+50];
	static char per_number[N];

m:
		i = 0;
		cout << "Enter your number: " << endl;
		gets(num);
		len = strlen(num);
		if (len != 4) {
			cout << endl << "Enter right number!" << endl;
			goto m;
		}
		while (i < N) {
			per_number[i] = num[i];
			i++;
		}
		
		if ((per_number[0] == per_number[1]) || (per_number[0] == per_number[2]) || (per_number[0] == per_number[3]) || (per_number[1] == per_number[2]) || (per_number[1] == per_number[3]) || (per_number[2] == per_number[3])) {
			cout << endl << "Enter right number!" << endl;
			goto m;
		}
		return per_number;
}


void congratulations(int *A) {
	cout << endl << "Congratulations! You guessed the number! And it was: " << endl;
	cout << "============" << endl;
	for (int i = 0; i < N; i++) {
		cout << "|" << A[i] << "|";
	}
	cout << endl << "============";
	cout << endl;
}

_________________________________________________________________________________________________________________________________________


#include <iostream>
#include <cstdlib>
#include <string.h>
#include <vector>
#include <ctime>

#define N 100
#define WIN_POS 11
#define NEAR_WIN_POS 21
#define MAX_NUMBER 10
#define MIN_NUMBER 1

struct Players
{
	int number;
	char nickname[20];
} player[2];

void instruction(std::vector<char> *vec);
char quest_vs_who();
void play_vs_anplayer(std::vector<char> *vec);
char ask_yes_no();
void who_is_who(struct Players* player, char letter);
void play_vs_computer(std::vector<char> *vec);
int matches_computer(std::vector<char> *vec);
int matches_players(std::vector<char> *vec);
int matches_player(std::vector<char> *vec);

int main() {
	char letter;
	std::vector<char> vec;

	instruction(&vec);  
	letter = quest_vs_who();
	
	if (letter == 'p'){
		play_vs_anplayer(&vec);
	}
	else{
		play_vs_computer(&vec);
	}	

	return 0;
}

void instruction(std::vector<char> *vec) {
	int i;

	std::cout << "Welcome to the game '100 Matches'" << std::endl;   
	std::cout << "Below you can see your 100 matches, so you should take the count between 1 to 10" << std::endl;

	for (i = 0; i < N; i++) {
		vec->push_back('|');
		std::cout << (*vec)[i] << ' ';    
	}
	std::cout << std::endl;
}

char quest_vs_who() {
	char letter;

	do {
		std::cout << "Against whom do you want to play? Computer (c) or another player (p)?" << std::endl;
		std::cin >> letter;
	} while (letter != 'c' && letter != 'p');

	return letter;
}

void who_is_who(struct Players* player, char letter) {

	if (letter == 'y') {
		player[0].number = 0;
		player[1].number = 1;
	}
	if (letter == 'n') {
		player[0].number = 1;
		player[1].number = 0;
	}
}

void play_vs_anplayer(std::vector<char>* vec) {
	int matches, count = 0;
	std::cout << "Ok, you will be playing against another player" << std::endl;
	std::cout << "Enter your nicknames" << std::endl;
	std::cout << "Enter nickname of first player: " << std::endl;
	std::cin >> player[0].nickname;
	std::cout << "Enter nickname of second player: " << std::endl;
	std::cin >> player[1].nickname;
	char answer = ask_yes_no();
	who_is_who(player, answer);

	if (player[0].number == 0) { count = 0; }
	else { count = 1; }

	while (vec->size() != 0) {
		std::cout << std::endl << "How many matches you will take?" << std::endl;
		matches = matches_player(vec);

		std::vector<char>::iterator it_begin = vec->begin();
		vec->erase(it_begin, it_begin + matches);

		for (std::vector<char>::iterator i = vec->begin(); i != vec->end(); i++) {
			std::cout <<  *i;
		}
		
		std::cout << "(" << vec->size() << ")" << std::endl;
		count = 1 - count;	
	}
	if (count == 0) { std::cout << "The first player has won! And his name is - " << player[count].nickname << std::endl;}
	else{ std::cout << "The second player has won! And his name is - " << player[count].nickname << std::endl;}
}

void play_vs_computer(std::vector<char>* vec){
	int matches, count = 0;
	std::cout << "Ok, you will be playing against computer" << std::endl;
	std::cout << "Enter your nickname" << std::endl;
	std::cin >> player[0].nickname;
	strcpy(player[1].nickname, "Computer");
	char answer = ask_yes_no();
	who_is_who(player, answer);
	
	if (player[0].number == 0) { count = 0; }
	else { count = 1; }
	
	while(vec->size() != 0){
		if(count == 0){
			std::cout << std::endl << "How many matches you will take?" << std::endl;
			matches = matches_player(vec);
		}
		
		else{
			matches = matches_computer(vec);
			std::cout << std::endl << "Ok, I will take " << matches << " matches - said computer..." << std::endl << std::endl;
		}
		
		std::vector<char>::iterator it_begin = vec->begin();
		vec->erase(it_begin, it_begin + matches);

		for (std::vector<char>::iterator i = vec->begin(); i != vec->end(); i++) {
			std::cout <<  *i;
		}
		std::cout << "(" << vec->size() << ")" << std::endl;
		count = 1 - count;
	}
	
	if (count == 0) { std::cout << "The player has lost! And his name is - " << player[count].nickname << std::endl;}
	else{ std::cout << "The " << player[count].nickname << " has won! Good job!" << std::endl;}
}

char ask_yes_no(){
	char letter;
	do {
		std::cout << "Do you want to go first? Answer yes (y) or no (n).";
		std::cin >> letter;
	} while (letter != 'y' && letter != 'n');
	return letter;
}

int matches_computer(std::vector<char>* vec){
	int matches;
	srand(time(0));
	
	if(vec->size() <= NEAR_WIN_POS && vec->size() > WIN_POS) matches = vec->size() - WIN_POS;
	else if(vec->size() < WIN_POS) matches = vec->size();
	else matches = rand() % (MAX_NUMBER - MIN_NUMBER + 1) + MIN_NUMBER;
	
	return matches;
}

int matches_player(std::vector<char> *vec){
	int matches;
	
	while (1){
		std::cin >> matches;
		if ((matches >= MIN_NUMBER) && (matches <= MAX_NUMBER)) {
			if (matches > vec->size()) std::cout << "The number entered is greater than required. Please try again" << std::endl;
			else break;
		}
		else std::cout << "Wrong amount. Please try again" << std::endl;
	}
	
	return matches;
}

________________________________________________________________________________________________________


